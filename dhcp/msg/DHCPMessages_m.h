//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msg/DHCPMessages.msg.
//

#ifndef __DHCP_DHCPMESSAGES_M_H
#define __DHCP_DHCPMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace dhcp {

class DHCPDiscover;
class DHCPOffer;
class DHCPRequest;
class DHCPAck;

}  // namespace dhcp


namespace dhcp {

/**
 * Class generated from <tt>msg/DHCPMessages.msg:3</tt> by opp_msgtool.
 * <pre>
 * message DHCPDiscover
 * {
 * }
 * </pre>
 */
class DHCPDiscover : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const DHCPDiscover& other);

  protected:
    bool operator==(const DHCPDiscover&) = delete;

  public:
    DHCPDiscover(const char *name=nullptr, short kind=0);
    DHCPDiscover(const DHCPDiscover& other);
    virtual ~DHCPDiscover();
    DHCPDiscover& operator=(const DHCPDiscover& other);
    virtual DHCPDiscover *dup() const override {return new DHCPDiscover(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPDiscover& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPDiscover& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msg/DHCPMessages.msg:6</tt> by opp_msgtool.
 * <pre>
 * message DHCPOffer
 * {
 * }
 * </pre>
 */
class DHCPOffer : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const DHCPOffer& other);

  protected:
    bool operator==(const DHCPOffer&) = delete;

  public:
    DHCPOffer(const char *name=nullptr, short kind=0);
    DHCPOffer(const DHCPOffer& other);
    virtual ~DHCPOffer();
    DHCPOffer& operator=(const DHCPOffer& other);
    virtual DHCPOffer *dup() const override {return new DHCPOffer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPOffer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPOffer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msg/DHCPMessages.msg:9</tt> by opp_msgtool.
 * <pre>
 * message DHCPRequest
 * {
 * }
 * </pre>
 */
class DHCPRequest : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const DHCPRequest& other);

  protected:
    bool operator==(const DHCPRequest&) = delete;

  public:
    DHCPRequest(const char *name=nullptr, short kind=0);
    DHCPRequest(const DHCPRequest& other);
    virtual ~DHCPRequest();
    DHCPRequest& operator=(const DHCPRequest& other);
    virtual DHCPRequest *dup() const override {return new DHCPRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msg/DHCPMessages.msg:12</tt> by opp_msgtool.
 * <pre>
 * message DHCPAck
 * {
 * }
 * </pre>
 */
class DHCPAck : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const DHCPAck& other);

  protected:
    bool operator==(const DHCPAck&) = delete;

  public:
    DHCPAck(const char *name=nullptr, short kind=0);
    DHCPAck(const DHCPAck& other);
    virtual ~DHCPAck();
    DHCPAck& operator=(const DHCPAck& other);
    virtual DHCPAck *dup() const override {return new DHCPAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPAck& obj) {obj.parsimUnpack(b);}


}  // namespace dhcp


namespace omnetpp {

template<> inline dhcp::DHCPDiscover *fromAnyPtr(any_ptr ptr) { return check_and_cast<dhcp::DHCPDiscover*>(ptr.get<cObject>()); }
template<> inline dhcp::DHCPOffer *fromAnyPtr(any_ptr ptr) { return check_and_cast<dhcp::DHCPOffer*>(ptr.get<cObject>()); }
template<> inline dhcp::DHCPRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<dhcp::DHCPRequest*>(ptr.get<cObject>()); }
template<> inline dhcp::DHCPAck *fromAnyPtr(any_ptr ptr) { return check_and_cast<dhcp::DHCPAck*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DHCP_DHCPMESSAGES_M_H

